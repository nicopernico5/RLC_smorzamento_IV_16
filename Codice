# Codice per l'analisi del circuito RLC scritta da Niccolò
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from scipy.optimize import curve_fit
import mplhep as hep
from cycler import cycler
import matplotlib.colors as colors
import multiprocessing.pool
from matplotlib.ticker import ScalarFormatter
from mpl_toolkits.mplot3d import Axes3D

# Ho appena importato le librerie di cui ho bisogno
# Numpy è fondamentale per qualsiasi calcolo
# Matplotlib è la libreria per fare i grafici
# Scipy è un estensione specializzata per fare le regressioni NON lineari
# mplhep è un estensione di Matplotlib che fornisce stili di grafici vari (tra cui ROOT)
# Cycler è un'altra estensione per migliorare la grafica di Matplotlib
# Multiprocessing.pool è una libreria per permettere al codice di SPACCARTI il computer 
# (formalmente di fare quanti processi ha bisogno)


# Ora settiamo tutte le impostazioni per il grafico:
# print(plt.style.available) # Così stampiamo sul terminale tutti i possibili stili di grafico disponibili

plt.style.use(hep.style.ROOT) # Questo è lo stile di ROOT.CERN, quello che useremo per il grafico finale, eviteremo di utilizzarlo nell'analisi perchè è un pò più pesante

# plt.style.use('fast') # Stile di grafico FAST, dovrebbe essere veloce e di semplice visualizzazione

# Ora settiamo davvero tutti i parametri:
params = {'legend.fontsize': '10', # Grandezza del Font della LEGENDA
         'legend.loc': 'upper right', # Posizione della legenda: "upper right" in alto a destra
          'legend.frameon':       'True',  # Questa serve per avere i bordi della legenda
          'legend.framealpha':    '0.8',      # Questa è la trasparenza della legenda
          'legend.facecolor':     'w', # Colore della legenda
          'legend.edgecolor':     'w',      # Colore dei Bordi della legenda
          'figure.figsize': (5, 4), # Stabiliamo delle dimensioni standard dei miei grafici
         'axes.labelsize': '10', # Dimensione del testo dei label sugli assi
         'figure.titlesize' : '14', # Dimensione del Titolo dell'intera figura (tipo quando ci sono più grafici)
         'axes.titlesize':'12', # Dimensione del testo del titolo del singolo grafico
         'xtick.labelsize':'10', # Dimensione del testo dei tics (x)
         'ytick.labelsize':'10', # Dimensione del testo dei tics (y)
         'lines.linewidth': '1', # Spessore delle linee
         'text.usetex': True, # Ti permette di scrivere sui grafici, SERVE LATEX INSTALLATO
#         'axes.formatter.limits': '-5, -3',
         'axes.formatter.min_exponent': '2',
#         'axes.prop_cycle': cycler('color', 'bgrcmyk'),
         'figure.subplot.left':'0.125',
         'figure.subplot.bottom':'0.125',
         'figure.subplot.right':'0.925',
         'figure.subplot.top':'0.925',
         'figure.subplot.wspace':'0.1',
         'figure.subplot.hspace':'0.1',
         'figure.constrained_layout.use' : True
          }
plt.rcParams.update(params) #Inserisce tutti i parametri dentro le impostazione del PLOT
plt.rcParams['axes.prop_cycle'] = cycler(color=['b','g','r','c','m','y','k']) # Fornisce un ciclo di colori definito per quando ci sono diversi elementi nel grafico


# CARICAMENTO DEI DATI
file = 'dati' # Nome file (DA MODIFICARE CON IL NOME DEL TUO FILE)
inputname = file+'.txt'

data = np.loadtxt(inputname).T # carica i dati per riga, e poi traspone la matrice ricavata, per avere la prima colonna nella prima riga e la seconda colonna nella seconda riga

# Faccio un passaggio aggiuntivo, l'intento è togliere l'offset sia nel tempo per avere un fit con meno parametri liberi
# Possiamo fare lo stesso ragionamento per il voltaggio (per analisi future)

shifttempo= 0.005 #!!!
shiftVout = 0     # 0.0152 (Questo sarebbe il nostro valore ottimale per lo shift)

tempo = (data[0,data[0]>0] - shifttempo) # prima colonna e' il tempo. (Li prendo per tempi maggiori di 0)
Vout = (data[1,data[0]>0] - shiftVout) # seconda colonna sono le tensioni. (Li prendo per tempi maggiori di 0)
n= len(tempo) # Conta quanti dati ci sono

#Controllo se sto leggendo i miei dati correttamente
if n<10:
     print('Stai leggendo troppi pochi dati')
     exit()
else:
    print('Dati letti correttamente:', n, '\n')



# Inseriamo i valori iniziali per aiutare il nostro fit
Ainit= 1.942 # voltaggio max (V)
Binit = 7.6e+5  # frequenza angolare (Hz)
Cinit = 1e-5 # tau (s)

v0init = 0.016 # offset Voltaggio (V)
t0init = 1.e-10 # shift temporale dell'inizio dell'oscillazione (s)


# Errori di lettura
scalaV = 0.03*0.41 #  errore PERCENTUALE dell'oscilloscopio nel voltaggio 3% * distr.triangolare
letturaV = 0.05*0.41  # errore di LETTURA dell'oscilloscopio nel voltaggio 1/10 div * distr.triangolare
letturaT = 0.5e-6*0.41  # errore di LETTURA (idem) (E' TROPPO GRANDE STO ERRORE!!!!!!)
#letturaT = 5e-8*0.41


eVout = np.sqrt((letturaV)**2 + (scalaV * Vout)**2) # Propagazione Errori
etempo = letturaT 


# Definiamo ora delle FUNZIONI per rendere leggibile il codice
# Fit, tenendo liberi 5 valori: A, B, C, voffset, toffset.
def fit5(t,A,B,C,voffset,toffset):
    x= t- toffset
    Omega= np.sqrt(B**2-1/C**2)
    fit5val = A/Omega*np.exp(-x/C)*(1/C*np.sin(Omega*x)+Omega*np.cos(Omega*x)) + voffset #Inserito la formula 5.74 dispense Longhin
    return fit5val

# Fit, tenendo liberi 3 valori: A, B, C.
def fit3(t, A, B, C):
    Omega = np.sqrt(B**2-1/C**2)
    fit3val = A/Omega*np.exp(-t/C)*(1/C*np.sin(Omega*t)+Omega*np.cos(Omega*t))
    return fit3val

# Questa funzione crea una mappa tridimensionale (vettore in R3)
# con all'interno il valore del chi^2 associato ai valori dati dalla posizione nella matrice


# Per esempio se avessimo una matrice 3x3x3
# A_chi = (0.12; 0.23; 0.34), B_chi = (2.42; 3.56; 3.95), C_chi = (2.21; 2.34; 2.99)
# M_{AxBxC}:
# ( 32  54  64 ) ( 35  53  72 ) ( 33  55  68 )
# ( 22  34  43 ) ( 34  31  45 ) ( 40  38  33 )
# ( 21  24  33 ) ( 33  67  14 ) ( 36  71  28 )
# Matriche 3 D (dove le righe sono A, le colonne sono B, e le righe in profondità sono le C)
# M_{1x1xi}= 32,35,33
def fitchi2(i,j,k):
    x = tempo
    y = Vout
    x_err = etempo
    y_err = eVout
    AA,BB,CC = A_chi[i],B_chi[j],C_chi[k]
    residuals = (y - fit3(tempo,AA,BB,CC)) # Calcolo Teorico sui residui (uso la funzione per avere i valori del fit della funzione)
    chi2 = np.sum((residuals / y_err)**2) # Si noti che si stanno solo usando gli errori sulla y !!!
    #chi2 = np.sum((residuals / np.sqrt(y_err**2+x_err**2))**2) # Questo sarebbe con anche gli errori sulla x (ci fa accorgere che etempo è troppo grande!!!)
    mappa[i,j,k] = chi2


# Questa funzione crea un profilazione del tensore/mappa 3-dimensionale, cioè collassa una matrice
# 3D in una 2dimensionale, inserendo il minimo valore della dimensione che si vuole collassare.
def profi2D(axis,matrix3D):
    if axis == 1 :
        mappa2D = np.array([[np.min(matrix3D[:,b,c]) for b in range(step)] for c in range(step)])
       # Prendendo l'esempio di prima dovrebbe essere:
       # ( 32  35  33 )
       # ( 22  31  33 )
       # ( 21  14  28 )
    if axis == 2 :
        mappa2D = np.array([[np.min(matrix3D[a,:,c]) for a in range(step)] for c in range(step)])
    if axis == 3 :
        mappa2D = np.array([[np.min(matrix3D[a,b,:]) for a in range(step)] for b in range(step)])
    return mappa2D

# Funzione per effettuare la profilazione su un asse (1,2 o 3) di una matrice 3D.
# la funzione profila prima in 2D e poi in 1D sull'asse selezionato.
def profi1D(axis, mappa):
    if 1 in axis :
        mappa2D = np.array([[np.min(mappa[:,b,c]) for b in range(step)] for c in range(step)])
        if 2 in axis:
            mappa1D = np.array([np.min(mappa2D[b,:]) for b in range(step)])
            # Riprendendo l'esempio troveremo il vettore trasposto:
            # (32 22 14)T
        if 3 in axis:
            mappa1D = np.array([np.min(mappa2D[:,c]) for c in range(step)])
            # Per completezza:
            # (21 14 28)
    else :
        mappa2D = np.array([[np.min(mappa[a,:,c]) for a in range(step)] for c in range(step)])
        mappa1D = np.array([np.min(mappa2D[a,:]) for a in range(step)])
    return mappa1D

"""
#================================================================================================================
# Grafico dei dati cosi' come caricati  (Vout vs. tempo)
# 

fig, ax = plt.subplots(1, 1, figsize=(5, 4),constrained_layout = True)
ax.errorbar(tempo,Vout,yerr=eVout,xerr=etempo, fmt='o', label=r'$V_{out}$',ms=2)
ax.legend(prop={'size': 10}, loc='best')
ax.set_ylabel(r'Voltaggio ai capi di C [V]',loc='center')
plt.xlabel("Tempo [s]",loc='center')
plt.grid(True)
xticks = np.arange(0.005, 0.00505, 0.000005)


formatter = ScalarFormatter(useMathText=True)
formatter.set_powerlimits((-3, -3))  # Forza potenza 10^-3
ax.xaxis.set_major_formatter(formatter)
plt.xticks(xticks)

plt.savefig(file+'_1'+'.png',
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
            facecolor ="w",
            edgecolor ='w',
            orientation ='Portrait',
            dpi = 500)

plt.show()

#===============================================================================================================
"""

# Si procede ad effettuare un primo fit utilizzando la funzione fit5 che contiene offset sia nelle ascisse che nelle ordinate.
# Questo per valutarne l'eventuale compatibilita' con lo zero e in ogni caso per procedere eventualmente a uno shift nei due assi.
# In questo modo riduco il sistema a i soli 3 parametri relativi all'oscillazione. 
# Per le regressioni utilizziamo un algoritmo ai minimi quadrati in modo da avere piena corrispondenza con l'analisi esplicita che faremo del minimo del chi2.

popt, pcov = curve_fit(fit5, tempo, Vout, p0=[Ainit, Binit, Cinit, v0init, t0init], method='lm', sigma=eVout, absolute_sigma=True)
# POPT: Vettore con la stima dei parametri dal fit
# PCOV: Matrice delle covarianze
# method: 'lm' e' i minimi quadrati, quindi il minimo del chi2

perr = np.sqrt(np.diag(pcov))
residuA = Vout - fit5(tempo, *popt)


# Grafico questa prima regressione con shift sulle x e sulle y
x_fit = np.linspace(min(tempo), max(tempo), 1000) # Genero 1000 punti tra il tempo minimo e massimo per avere il grafico della funzione fittata


fig, ax = plt.subplots(2, 1, figsize=(5, 4),sharex=True, constrained_layout = True, height_ratios=[2, 1])
# ax[0].plot(x_fit,fit5(x_fit,Ainit,Binit,Cinit,v0init,t0init), label='Valori iniziali', linestyle='-', color='yellow')
ax[0].grid(True)
ax[0].errorbar(tempo, Vout, yerr=eVout, xerr=0, fmt='o', label=r'$V_{out}$',ms=2, color='tomato', elinewidth=0.1)
ax[0].plot(x_fit, fit5(x_fit, *popt), label='Fit', linestyle='-', color='black', linewidth=1, zorder=10)
ax[0].legend(loc='upper right')
ax[0].set_ylabel(r'Tensione ai capi di C [V]',loc='center')


ax[1].grid(True)
ax[1].errorbar(tempo,residuA,yerr=eVout, fmt='o', label=r'Residui$',ms=2,color='tomato', elinewidth=0.2)
ax[1].set_ylabel(r'Residui [V]',loc='center')
ax[1].set_xlabel(r'Tempo [s]',loc='center')
ax[1].plot(tempo,np.zeros(len(tempo)))

plt.savefig(file+'_2'+'.png',
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
            facecolor ="w",
            edgecolor ='w',
            orientation ='Portrait',
            dpi = 100)

#plt.show()

# Extract and print best fit (BF) parameters and errors
A_BF, B_BF, C_BF, v0_BF, t0_BF = popt #parametri del best fit
eA_BF, eB_BF, eC_BF, ev0_BF, et0_BF = np.sqrt(np.diag(pcov)) #errori sui parametri BF

# Chisq di questo fit
chisq5 = np.sum((residuA/eVout)**2)
df = n - 5
chisq_rid5 = chisq5/df

# Stampo tutti i risultati
print("============== BEST FIT with SciPy ===================")
print(r'A = ({a:.3e} +/- {b:.1e}) V, e%: {c}'.format(a=A_BF,b=eA_BF, c=eA_BF/A_BF*100))
print(r'B = ({c:.5e} +/- {d:.1e}) kHz, e%: {e}'.format(c=B_BF * 1e-3, d=eB_BF * 1e-3, e=eB_BF/B_BF*100))
print(r'C = ({e:.3e} +/- {f:.1e}) ms, e%: {c}'.format(e=C_BF * 1e3, f=eC_BF * 1e3, c=eC_BF/C_BF*100))
print(r'v0 = ({g:.4e} +/- {h:.1e}) mV'.format(g=v0_BF * 1e3, h=ev0_BF * 1e3))
print(r't0 = ({i:.4e} +/- {l:.1e}) ms'.format(i=t0_BF * 1e3, l=et0_BF * 1e3))
print(r'Chi quadro : {j}'.format(j=chisq5))
print(r'Chi quadro ridotto : {k}'.format(k=chisq_rid5))
print("=======================================================")
#==============================================================================================================
# Ora verifico se il mio v_0 e t_0 sono compatibili con gli errori, se lo sono posso eseguire il fit a 3 parametri

comp_v0= v0_BF/eVout
comp_t0= t0_BF/etempo

print(r'Compatibilita v_0/errV: {a}'.format(a=comp_v0))
print(r'Compatibilita t_0/errtempo: {b}'.format(b=comp_t0))
print("=======================================================")
#==============================================================================================================
# Se è compatibile faccio il fit con 3 valori anzichè 5
Vout = Vout
eVout = eVout
tempo = tempo-t0_BF

# Nuova regressione utilizzando fitf2 quindi sono nei parametri A,B e C, sempre con i minimi quadrati
popt, pcov = curve_fit(fit3, tempo, Vout, p0=[A_BF, B_BF, C_BF], method='lm', sigma=eVout, absolute_sigma=True)

# variables error and chi2
perr = np.sqrt(np.diag(pcov))
residuA3 = Vout - fit3(tempo, *popt)
chisq3 = np.sum((residuA3/eVout)**2)
df3 = n - 3
chisq_rid3 = chisq3/df3

# Grafico di questa regressione in A, B e C
fig, ax = plt.subplots(2, 1, figsize=(5, 4),sharex=True, constrained_layout = True, height_ratios=[2, 1])
# ax[0].plot(x_fit,fit3(x_fit,Ainit,Binit,Cinit), label='init guess', linestyle='dashed', color='green')
ax[0].errorbar(tempo,Vout,yerr=eVout,xerr=etempo, fmt='o', label=r'$V_{out}$',ms=2,color='palegreen', elinewidth=0.2)
ax[0].plot(x_fit, fit3(x_fit, *popt), label='Fit', linestyle='--', color='blue', zorder=10)
ax[0].legend(loc='upper left')
ax[0].set_ylabel(r'Tensione ai capi di C [V]', loc='center')
ax[0].grid(True)

ax[1].errorbar(tempo,residuA,yerr=eVout, fmt='o', label=r'Residui$',ms=2,color='palegreen',elinewidth=0.2)
ax[1].set_ylabel(r'Residui [V]', loc='center')
ax[1].set_xlabel(r'Tempo [s]', loc='center')
ax[1].plot(tempo,np.zeros(n))
ax[1].grid(True)

plt.savefig(file+'_3'+'.png',
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
            facecolor ="w",
            edgecolor ='w',
            orientation ='Portrait',
            dpi = 100)

#plt.show()

# Extract and print best fit (BF) parameters and errors
A_BF, B_BF, C_BF = popt #parametri del best fit
eA_BF, eB_BF, eC_BF = np.sqrt(np.diag(pcov)) # errori del BF

print("============== BEST FIT with SciPy ====================")
print(r'A = ({a:.3e} +/- {b:.1e}) V , e%: {c}'.format(a=A_BF,b=eA_BF, c=eA_BF/A_BF*100))
print(r'B = ({c:.5e} +/- {d:.1e}) kHz, e%: {c}'.format(c=B_BF * 1e-3, d=eB_BF * 1e-3, e=eB_BF/B_BF*100))
print(r'C = ({e:.3e} +/- {f:.1e}) ms, , e%: {c}'.format(e=C_BF * 1e3, f=eC_BF * 1e3, c=eC_BF/C_BF*100))
print(r'Chi quadro : {j}'.format(j=chisq3))
print(r'Chi quadro ridotto : {k}'.format(k=chisq_rid3))
print("=======================================================")

#=========================================================================================
#=========================================================================================

# Ora iniziano le cose serie:
# Proviamo a trovare manualmente il minimo del chi^2

# Scegliamo per quanti sigma a destra e sinistra vogliamo analizzare il minimo rispetto a quello che abbiamo trovato con il fit di Scipy  
NSI = 3

A0, A1 = A_BF - NSI * eA_BF, A_BF + NSI * eA_BF # estremi di scansione del parametro A
B0, B1 = B_BF - NSI * eB_BF, B_BF + NSI * eB_BF # estremi di scansione del parametro B
C0, C1 = C_BF - NSI * eC_BF, C_BF + NSI * eC_BF # estremi di scansione del parametro C

print("Estremi di scansione dei 3 parametri")
print(f"(A0 = {A0}, A1 = {A1}) V")
print(f"(B0 = {B0}, B1 = {B1}) Hz")
print(f"(C0 = {C0}, C1 = {C1}) s")

step = 50 # discretizzazione all'interno dell'intervallo di scansione (ALMENO 100 SUUL GRAFICO FINALE)
# Creo un array che mi divide l'intervallo interessato step-volte
A_chi = np.linspace(A0,A1,step)
B_chi = np.linspace(B0,B1,step)
C_chi = np.linspace(C0,C1,step)

# Inizializzo la matrice 3D del chi2 con tutti zeri
mappa = np.zeros((step,step,step))
# Creo una lista degli indici da mappare con il pool su piu processori
item = [(i,j,k) for i in range(step) for j in range(step) for k in range(step)]


# inizializzo il pool per mandare su piu processori
pool = multiprocessing.pool.ThreadPool(50)

# Dico a Pyton di prendere la funzione fitchi2 e calcolarla con 20 dei dati di item alla volta
pool.starmap(fitchi2, item, chunksize=20)
# Chiudo i processori a processo finito
pool.close()

# Trasformo una lista di liste in un array 3D
mappa = np.asarray(mappa)            

# trovo il minimo del chi2 e la sua posizione nella matrice 3D
chi2_min = np.min(mappa)
argchi2_min = np.unravel_index(np.argmin(mappa),mappa.shape)

# calcolo i residui della regressione utilizzando i valori dei parametri del minimo del chi2
# ricontrollo che il minimo del chi2 sia coerente.
residui_chi2 = Vout - fit3(tempo,A_chi[argchi2_min[0]],B_chi[argchi2_min[1]],C_chi[argchi2_min[2]])

"""
# Grafico nuovamente la regressione e i residui, questa volta ottenuti calcolando a mano il minimo del chi2
fig, ax = plt.subplots(2, 1, figsize=(5, 4),sharex=True, constrained_layout = True, height_ratios=[2, 1])
ax[0].plot(x_fit, fit3(x_fit, A_chi[argchi2_min[0]],B_chi[argchi2_min[1]],C_chi[argchi2_min[2]]), label='Fit', linestyle='--', color='blue')
#ax[0].plot(x_fit,fit3(x_fit,Ainit,Binit,Cinit), label='init guess', linestyle='dashed', color='green')
ax[0].errorbar(tempo,Vout,yerr=eVout,xerr=etempo, fmt='o', label=r'$V_{out}$',ms=2,color='red')
ax[0].legend(loc='upper left')
ax[0].set_ylabel(r'Tensione ai capi di R')

ax[1].errorbar(tempo,residuA,yerr=eVout, fmt='o', label=r'Residui$',ms=2,color='red')
ax[1].set_ylabel(r'Residui (V)')
ax[1].set_xlabel(r'tempo (s)', loc='center')
ax[1].plot(tempo,np.zeros(len(tempo)))

plt.savefig(file+'_4'+'.png',
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
            facecolor ="w",
            edgecolor ='w',
            orientation ='Portrait',
            dpi = 100)

plt.show()
"""

# A questo punto devo calcolare l'errore sui singoli parametri con il chi2+1, 
# e profilare il chi2 sui diversi parametri. Utilizzo le funzioni sopra definite.

#Calcolo Profilazione 2D
ABchi2D = profi2D(1,mappa)
ACchi2D = profi2D(2,mappa) 
BCchi2D = profi2D(3,mappa) 

#Calcolo Profilazioni 1D
prof_A = profi1D([2,3],mappa)  
prof_B = profi1D([1,3],mappa)
prof_C = profi1D([1,2],mappa)     


# Per trovare l'errore sui parametri devo trovare i valori a chi2+1
# Per farlo sottraiamo alle profilazioni chi2+1 e ne facciamo il valore assoluto
# In questo modo i dati saranno tutti positivi ed avranno un minimo a chi2+1


lvl = chi2_min+1. # 2.3 (2parametri) # 3.8 (3parametri)  COSA DOBBIAMO METTEREEEEEEEEEEEEEEEEEEEEEEEEE???????????????????????????
diff_B = abs(prof_B-lvl)
diff_C = abs(prof_C-lvl)
diff_A = abs(prof_A-lvl)

B_dx = np.argmin(diff_B[B_chi<B_BF]) # minimo di B per valori inferiori al BF
B_sx = np.argmin(diff_B[B_chi>B_BF])+len(diff_B[B_chi<B_BF]) # minimo di B per valori superiori al BF
C_dx = np.argmin(diff_C[C_chi<C_BF])
C_sx = np.argmin(diff_C[C_chi>C_BF])+len(diff_C[C_chi<C_BF])
A_dx = np.argmin(diff_A[A_chi<A_BF])
A_sx = np.argmin(diff_A[A_chi>A_BF])+len(diff_A[A_chi<A_BF])
print(B_dx,B_sx,C_dx,C_sx,A_dx,A_sx)

# Facendo la differenza rispetto al BF ottengo gli errori a dx e a sx del BF
errA = A_chi[argchi2_min[0]]-A_chi[A_dx]
errAA = A_chi[A_sx]-A_chi[argchi2_min[0]]
errB = B_chi[argchi2_min[1]]-B_chi[B_dx] 
errBB = B_chi[B_sx] -B_chi[argchi2_min[1]]
errC = C_chi[argchi2_min[2]]-C_chi[C_dx]
errCC = C_chi[C_sx]-C_chi[argchi2_min[2]]


print("============== BEST FIT with chi2 ====================")
print(r'A = ({a:.3e} - {b:.1e} + {c:.1e})'.format(a=A_chi[argchi2_min[0]],b=errA,c=errAA))
print(r'B = ({d:.5e} - {e:.1e} + {f:.1e}) kHz'.format(d=B_chi[argchi2_min[1]] * 1e-3, e=errB * 1e-3, f=errBB* 1e-3))
print(r'C = ({g:.3e} - {h:.1e} + {n:.1e}) ms'.format(g=C_chi[argchi2_min[2]] * 1e3, h=errC * 1e3,  n=errCC * 1e3))
print(r'chisq = {m:.2f}'.format(m=np.min(mappa)))
print("=======================================================")


#Adesso faccio il grafico delle profilazioni 2D e 1D dei diversi parametri


# definisco la mappa colore
cmap = mpl.colormaps['viridis'].reversed()
level = np.linspace(np.min(ABchi2D),np.max(ABchi2D),100)
line_c = 'gray'

# Profilazione di Omega e Tau
fig, ax = plt.subplots(2, 2, figsize=(7, 6),constrained_layout = True, height_ratios=[3, 1], width_ratios=[1,3], sharex='col', sharey='row') # Creo la mia figura con 4 riquadri e li proporziono come voglio
ax[1,0].set_axis_off() #Gli dico che il riquadro in basso a sx è vuoto
fig.suptitle(r'$\chi^2 \left(\Omega, \tau \right)$') # Titolo con Latex
im = ax[0,1].contourf(B_chi,C_chi,ABchi2D, levels=level, cmap=cmap) # Questa è l'effettiva immagine, contour filled, cioè linee rimpite di colore per dare l'effetto di profondità
cbar = fig.colorbar(im, extend='both', ax=ax[0,1], shrink=0.95, ticks = [chi2_min+1.,chi2_min+2.3,chi2_min+3.8,chi2_min+10],format='%.1f') # Barra tipo Legenda dei colori
#cbar = fig.colorbar(im, extend='both', shrink=0.8, ax=ax[0,1]) # Proviamo senza Ticks assegnati
cbar.set_label(r'$\chi^2$',rotation=360, loc='center') # Label dei colori
cbar.ax.tick_params(labelsize=8)

CS = ax[0,1].contour(B_chi,C_chi,ABchi2D, levels=[chi2_min+0.0001,chi2_min+1,chi2_min+2.3,chi2_min+3.8],linewidths=1, colors='k',linestyles='dotted')
ax[0,1].clabel(CS, inline=True, fontsize=9, fmt='%.1f')
ax[0,1].text(B_chi[np.argmin(prof_B)],C_chi[np.argmin(prof_C)],r'{g:.1f}'.format(g=chi2_min), color='k',alpha=0.8, fontsize=9)
ax[0,1].plot([B0,B1],[C_chi[C_sx],C_chi[C_sx]],color=line_c, ls='dashed')
ax[0,1].plot([B0,B1],[C_chi[C_dx],C_chi[C_dx]],color=line_c, ls='dashed')
ax[0,1].plot([B_chi[B_sx],B_chi[B_sx]],[C0,C1],color=line_c, ls='dashed')
ax[0,1].plot([B_chi[B_dx],B_chi[B_dx]],[C0,C1],color=line_c, ls='dashed')

ax[0,0].plot(prof_B,C_chi,ls='-') 
ax[0,0].plot([int(chi2_min-2),int(chi2_min+10)],[C_chi[C_sx],C_chi[C_sx]], color=line_c, ls='dashed') 
ax[0,0].plot([int(chi2_min-2),int(chi2_min+10)],[C_chi[C_dx],C_chi[C_dx]], color=line_c, ls='dashed')

ax[0,0].set_xticks([int(chi2_min),int(chi2_min+2),int(chi2_min+4),int(chi2_min+6),int(chi2_min+8)])
ax[0,0].text(int(chi2_min+2),C_chi[np.argmin(prof_C)],r'{g:.4}'.format(g=C_chi[np.argmin(prof_C)]*1000000), color='k',alpha=0.5, fontsize=9)
ax[0,0].text(int(chi2_min+4),C_chi[C_sx],r'{g:.2}'.format(g=errCC*1000000), color='b',alpha=0.8, fontsize=7)
ax[0,0].text(int(chi2_min+4),C_chi[C_dx],r'{g:.2}'.format(g=-1*errC*1000000), color='r',alpha=0.8, fontsize=7)

ax[1,1].plot(B_chi,prof_C) 
ax[1,1].plot([B_chi[B_sx],B_chi[B_sx]],[int(chi2_min-2),int(chi2_min+10)], color=line_c, ls='dashed') 
ax[1,1].plot([B_chi[B_dx],B_chi[B_dx]],[int(chi2_min-2),int(chi2_min+10)], color=line_c, ls='dashed')

ax[1,1].set_yticks([int(chi2_min),int(chi2_min+4),int(chi2_min+8)])
ax[1,1].text(B_chi[np.argmin(prof_B)],int(chi2_min+2),r'{g:.5}'.format(g=B_chi[np.argmin(prof_B)]/1000), color='k',alpha=0.5, fontsize=9)
ax[1,1].text(B_chi[B_sx],int(chi2_min+4),r'{g:.2}'.format(g=errBB/1000), color='b',alpha=0.8, fontsize=7)
ax[1,1].text(B_chi[B_dx],int(chi2_min+4),r'{g:.2}'.format(g=-1*errB/1000), color='r',alpha=0.8, fontsize=7)

ax[0,0].set_ylabel(r'$\tau\left(s\right)$',loc='center' ) 
ax[1,1].set_xlabel(r'$\Omega\left(Hz\right)$',loc='center') 
ax[0,0].set_xlim(int(chi2_min-2),int(chi2_min+10)) 
ax[1,1].set_ylim(int(chi2_min-2),int(chi2_min+10))

formatter = ScalarFormatter(useMathText=True)
formatter.set_powerlimits((3, 3))  # Forza potenza 10^3 per l'asse x
ax[1,1].xaxis.set_major_formatter(formatter)

#plt.show()

# Questo è sistemato alla perfezione, basta ricopiare le impostazioni negli altri 2 grafici ()
"""
plt.savefig(file+'_5'+'.png',
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
           facecolor ="w",
           edgecolor ='w',
            orientation ='Portrait',
            dpi = 100)

"""
#=========================================================================
# Profilazione di V0 e Tau
fig, ax = plt.subplots(2, 2, figsize=(7,6),constrained_layout = True, height_ratios=[3, 1], width_ratios=[1,3], sharex='col', sharey='row')
im = ax[0,1].contourf(A_chi,C_chi,ABchi2D, levels=level, cmap=cmap)
fig.suptitle(r'$\chi^2 \left(v_0, \tau \right)$')
cbar = fig.colorbar(im, extend='both', shrink=0.9, ax=ax[0,1], ticks = [chi2_min+1,chi2_min+2.3,chi2_min+3.8,chi2_min+10], format='%.1f') 
cbar.set_label(r'$\chi^2$',rotation=360,loc='center')
cbar.ax.tick_params(labelsize=8)
CS = ax[0,1].contour(A_chi,C_chi,ABchi2D, levels=[chi2_min+0.0001,chi2_min+1,chi2_min+2.3,chi2_min+3.8],linewidths=1, colors='k',linestyles='dotted')
ax[0,1].clabel(CS, inline=True, fontsize=9, fmt='%.1f')
ax[0,1].text(A_chi[np.argmin(prof_A)],C_chi[np.argmin(prof_C)],r'{g:.1f}'.format(g=chi2_min), color='k',alpha=0.8, fontsize=9)
ax[0,1].plot([A0,A1],[C_chi[C_sx],C_chi[C_sx]],color=line_c, ls='dashed')
ax[0,1].plot([A0,A1],[C_chi[C_dx],C_chi[C_dx]],color=line_c, ls='dashed')
ax[0,1].plot([A_chi[A_sx],A_chi[A_sx]],[C0,C1],color=line_c, ls='dashed')
ax[0,1].plot([A_chi[A_dx],A_chi[A_dx]],[C0,C1],color=line_c, ls='dashed')

ax[0,0].plot(prof_A,C_chi,ls='-') 
ax[0,0].plot([int(chi2_min-2),int(chi2_min+10)],[C_chi[C_sx],C_chi[C_sx]], color=line_c, ls='dashed') 
ax[0,0].plot([int(chi2_min-2),int(chi2_min+10)],[C_chi[C_dx],C_chi[C_dx]], color=line_c, ls='dashed')

ax[0,0].set_xticks([int(chi2_min),int(chi2_min+2),int(chi2_min+4),int(chi2_min+6),int(chi2_min+8)])
ax[0,0].text(int(chi2_min+2),C_chi[np.argmin(prof_C)],r'{g:.3f}'.format(g=C_chi[np.argmin(prof_C)]*1000000), color='k',alpha=0.5, fontsize=9)
ax[0,0].text(int(chi2_min+4),C_chi[C_sx],r'{g:.3f}'.format(g=errCC*1000000), color='b',alpha=0.8, fontsize=7)
ax[0,0].text(int(chi2_min+4),C_chi[C_dx],r'{g:.3f}'.format(g=-1*errC*1000000), color='r',alpha=0.8, fontsize=7)

ax[1,1].plot(A_chi,prof_C) 
ax[1,1].plot([A_chi[A_sx],A_chi[A_sx]],[int(chi2_min-2),int(chi2_min+10)], color=line_c, ls='dashed') 
ax[1,1].plot([A_chi[A_dx],A_chi[A_dx]],[int(chi2_min-2),int(chi2_min+10)], color=line_c, ls='dashed')

ax[1,1].text(A_chi[np.argmin(prof_A)],int(chi2_min+2),r'{g:.4f}'.format(g=A_chi[np.argmin(prof_A)]), color='k',alpha=0.8, fontsize=9)
ax[1,1].text(A_chi[A_sx],int(chi2_min+4),r'{g:.4f}'.format(g=errAA), color='b',alpha=0.8, fontsize=7)
ax[1,1].text(A_chi[A_dx],int(chi2_min+4),r'{g:.4f}'.format(g=-1*errA), color='r',alpha=0.8, fontsize=7)
ax[1,1].set_yticks([int(chi2_min),int(chi2_min+4),int(chi2_min+8)])

ax[1,0].set_axis_off()
ax[0,0].set_ylabel(r'$\tau\left(s\right)$',loc='center') 
ax[1,1].set_xlabel(r'$v_0 \left(V\right)$',loc='center') 
ax[0,0].set_xlim(int(chi2_min-2),int(chi2_min+10)) 
ax[1,1].set_ylim(int(chi2_min-2),int(chi2_min+10))

"""plt.savefig(file+'_6'+'.png',
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
            facecolor ="w",
            edgecolor ='w',
            orientation ='Portrait',
            dpi = 100)
"""

#plt.show()


#=========================================================================


# Profilazione di Omega e V_0
fig, ax = plt.subplots(2, 2, figsize=(7, 6),constrained_layout = True, height_ratios=[3, 1], width_ratios=[1,3], sharex='col', sharey='row') # Creo la mia figura con 4 riquadri e li proporziono come voglio
ax[1,0].set_axis_off() #Gli dico che il riquadro in basso a sx è vuoto
fig.suptitle(r'$\chi^2 \left(v_0, \Omega \right)$') # Titolo con Latex
im = ax[0,1].contourf(A_chi,B_chi,BCchi2D, levels=level, cmap=cmap) # Questa è l'effettiva immagine, contour filled, cioè linee rimpite di colore per dare l'effetto di profondità
cbar = fig.colorbar(im, extend='both', ax=ax[0,1], shrink=0.95, ticks = [chi2_min+1.,chi2_min+2.3,chi2_min+3.8,chi2_min+10],format='%.1f') # Barra tipo Legenda dei colori
#cbar = fig.colorbar(im, extend='both', shrink=0.8, ax=ax[0,1]) # Proviamo senza Ticks assegnati
cbar.set_label(r'$\chi^2$',rotation=360, loc='center') # Label dei colori
cbar.ax.tick_params(labelsize=8)

CS = ax[0,1].contour(A_chi,B_chi,BCchi2D, levels=[chi2_min+0.0001,chi2_min+1,chi2_min+2.3,chi2_min+3.8],linewidths=1, colors='k',linestyles='dotted')
ax[0,1].clabel(CS, inline=True, fontsize=9, fmt='%.1f')
ax[0,1].text(A_chi[np.argmin(prof_A)],B_chi[np.argmin(prof_B)],r'{g:.1f}'.format(g=chi2_min), color='k',alpha=0.8, fontsize=9)
ax[0,1].plot([A0,A1],[B_chi[B_sx],B_chi[B_sx]],color=line_c, ls='dashed')
ax[0,1].plot([A0,A1],[B_chi[B_dx],B_chi[B_dx]],color=line_c, ls='dashed')
ax[0,1].plot([A_chi[A_sx],A_chi[A_sx]],[B0,B1],color=line_c, ls='dashed')
ax[0,1].plot([A_chi[A_dx],A_chi[A_dx]],[B0,B1],color=line_c, ls='dashed')

ax[0,0].plot(prof_A,B_chi,ls='-') 
ax[0,0].plot([int(chi2_min-2),int(chi2_min+10)],[B_chi[B_sx],B_chi[B_sx]], color=line_c, ls='dashed') 
ax[0,0].plot([int(chi2_min-2),int(chi2_min+10)],[B_chi[B_dx],B_chi[B_dx]], color=line_c, ls='dashed')

ax[0,0].set_xticks([int(chi2_min),int(chi2_min+2),int(chi2_min+4),int(chi2_min+6),int(chi2_min+8)])
ax[0,0].text(int(chi2_min+2),B_chi[np.argmin(prof_B)],r'{g:.5}'.format(g=B_chi[np.argmin(prof_B)]/1000), color='k',alpha=0.5, fontsize=9)
ax[0,0].text(int(chi2_min+4),B_chi[C_sx],r'{g:.2}'.format(g=errBB/1000), color='b',alpha=0.8, fontsize=7)
ax[0,0].text(int(chi2_min+4),B_chi[C_dx],r'{g:.2}'.format(g=-1*errB/1000), color='r',alpha=0.8, fontsize=7)

ax[1,1].plot(A_chi,prof_B) 
ax[1,1].plot([A_chi[A_sx],A_chi[A_sx]],[int(chi2_min-2),int(chi2_min+10)], color=line_c, ls='dashed') 
ax[1,1].plot([A_chi[A_dx],A_chi[A_dx]],[int(chi2_min-2),int(chi2_min+10)], color=line_c, ls='dashed')

ax[1,1].set_yticks([int(chi2_min),int(chi2_min+4),int(chi2_min+8)])
ax[1,1].text(A_chi[np.argmin(prof_A)],int(chi2_min+2),r'{g:.5}'.format(g=A_chi[np.argmin(prof_A)]), color='k',alpha=0.5, fontsize=9)
ax[1,1].text(A_chi[A_sx],int(chi2_min+4),r'{g:.4f}'.format(g=errAA), color='b',alpha=0.8, fontsize=7)
ax[1,1].text(A_chi[A_dx],int(chi2_min+4),r'{g:.4f}'.format(g=-1*errA), color='r',alpha=0.8, fontsize=7)

ax[1,1].set_xlabel(r'$v_0\left(V\right)$',loc='center' ) 
ax[0,0].set_ylabel(r'$\Omega\left(Hz\right)$',loc='center') 
ax[0,0].set_xlim(int(chi2_min-2),int(chi2_min+10)) 
ax[1,1].set_ylim(int(chi2_min-2),int(chi2_min+10))

formatter = ScalarFormatter(useMathText=True)
formatter.set_powerlimits((3, 3))  # Forza potenza 10^3 per l'asse x
ax[0,0].yaxis.set_major_formatter(formatter)

plt.show()

# Questo è sistemato alla perfezione, basta ricopiare le impostazioni negli altri 2 grafici ()
"""
plt.savefig(file+'_5'+'.png',
            bbox_inches ="tight",
            pad_inches = 1,
            transparent = True,
           facecolor ="w",
           edgecolor ='w',
            orientation ='Portrait',
            dpi = 100)

"""





#================================================================================================================================================================
# Supponiamo che mappa abbia dimensioni (step, step, step)
# e che A_chi, B_chi, C_chi siano np.array di lunghezza step
step = mappa.shape[0]

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Prepara array per i punti da plottare
xs, ys, zs, vals = [], [], [], []

threshold = np.min(mappa) + 3  # soglia per i valori "buoni"

for i in range(step):
    for j in range(step):
        for k in range(step):
            val = mappa[i, j, k]
            if val < threshold:
                xs.append(A_chi[i])
                ys.append(B_chi[j])
                zs.append(C_chi[k])
                vals.append(val)

# Normalizza i valori per la colormap
vals = np.array(vals)
cmap = mpl.colormaps['magma'].reversed()
sc = ax.scatter(xs, ys, zs, c=vals, cmap=cmap, marker='o')

ax.set_xlabel(r'$v_0\left(V\right)$')
ax.set_ylabel(r'$\Omega\left(Hz\right)$')
ax.set_zlabel(r'$\tau\left(s\right)$')

# Aggiunge la colorbar laterale
cb = plt.colorbar(sc, ax=ax, shrink=0.8)
cb.set_label(r'$\chi^2$',rotation=360)



size = 0.1 + 20 * (1 - (vals - vals.min()) / (vals.max() - vals.min()))
sc = ax.scatter(xs, ys, zs, c=vals, cmap=cmap, s=size, marker='o')

plt.show()
